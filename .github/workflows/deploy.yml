# ============================================================================
# GITHUB ACTION ROBUSTO PARA VOLLEYPASS (RAMA MAIN)
# Archivo: .github/workflows/deploy.yml
# Repositorio: korozcolt/volleypass
# ============================================================================

name: Deploy VolleyPass to Kronnos.dev

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy VolleyPass to Production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H 208.109.235.177 >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        ssh -o StrictHostKeyChecking=no kronnos@208.109.235.177 << 'EOF'
          set -e

          # Variables
          REPO_URL="https://github.com/korozcolt/volleypass.git"
          APP_DOMAIN="volleypass.kronnos.dev"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          RELEASE_DIR="/var/deployments/releases/$APP_DOMAIN/$TIMESTAMP"

          echo "=== INICIANDO DEPLOYMENT VOLLEYPASS ROBUSTO ==="
          echo "Timestamp: $TIMESTAMP"

          # Crear directorio de release
          mkdir -p "$RELEASE_DIR"
          cd "$RELEASE_DIR"

          # Clonar repositorio
          echo "Clonando repositorio..."
          git clone --branch main --single-branch --depth 1 "$REPO_URL" .

          # Instalar dependencias PHP
          echo "Instalando dependencias PHP..."
          composer install --no-dev --optimize-autoloader --no-interaction

          # Instalar dependencias Node.js (TODAS las dependencias incluyendo dev)
          if [[ -f "package.json" ]]; then
            echo "Instalando dependencias Node.js..."
            npm ci
            echo "Compilando assets..."
            npm run build
          fi

          # Configurar .env - M√âTODO ROBUSTO
          echo "Configurando .env..."

          ENV_SOURCE="/var/www/shared/configs/$APP_DOMAIN.env"

          if [[ -f "$ENV_SOURCE" ]]; then
            echo "Copiando .env desde configuraci√≥n compartida..."
            cp "$ENV_SOURCE" .env

            # Verificar que el archivo .env es v√°lido
            echo "Verificando archivo .env..."

            # Verificar que contiene DB_CONNECTION=mysql
            if grep -q "DB_CONNECTION=mysql" .env; then
              echo "‚úÖ Configuraci√≥n MySQL detectada"
            else
              echo "‚ùå No se encontr√≥ configuraci√≥n MySQL, corrigiendo..."
              # Forzar configuraci√≥n MySQL
              sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
              sed -i 's/DB_DATABASE=.*/DB_DATABASE=volleypass_db/' .env
              sed -i 's/DB_USERNAME=.*/DB_USERNAME=laravel/' .env
              sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=Kr0nn0s2024#Laravel/' .env
            fi

            # Asegurar que APP_KEY existe y es v√°lida
            if ! grep -q "APP_KEY=base64:" .env; then
              echo "Generando APP_KEY..."
              php artisan key:generate --force
            fi

          else
            echo "No se encontr√≥ .env compartido, creando uno nuevo..."
            cp .env.example .env

            # Configurar para MySQL espec√≠ficamente
            sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
            sed -i 's/DB_HOST=.*/DB_HOST=localhost/' .env
            sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
            sed -i 's/DB_DATABASE=.*/DB_DATABASE=volleypass_db/' .env
            sed -i 's/DB_USERNAME=.*/DB_USERNAME=laravel/' .env
            sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=Kr0nn0s2024#Laravel/' .env

            # Generar APP_KEY
            php artisan key:generate --force
          fi

          # Mostrar configuraci√≥n para depuraci√≥n
          echo "=== CONFIGURACI√ìN .ENV ==="
          echo "DB_CONNECTION: $(grep 'DB_CONNECTION=' .env | cut -d'=' -f2)"
          echo "DB_DATABASE: $(grep 'DB_DATABASE=' .env | cut -d'=' -f2)"
          echo "APP_KEY configurada: $(grep 'APP_KEY=' .env | cut -d'=' -f2 | cut -c1-20)..."

          # Comandos Laravel - ORDEN CORRECTO
          echo "Ejecutando comandos Laravel..."

          # 1. Limpiar caches existentes
          echo "Limpiando caches..."
          php artisan config:clear || true
          php artisan cache:clear || true
          php artisan view:clear || true
          php artisan route:clear || true

          # 2. Verificar configuraci√≥n
          echo "Verificando configuraci√≥n de base de datos..."
          if ! php artisan config:show database.connections.mysql.database 2>/dev/null | grep -q "volleypass_db"; then
            echo "Problema con configuraci√≥n, regenerando..."
            php artisan config:clear
          fi

          # 3. Probar conexi√≥n a base de datos
          echo "Probando conexi√≥n a base de datos..."
          if ! php artisan migrate:status >/dev/null 2>&1; then
            echo "Problema de conexi√≥n a BD, verificando credenciales..."
            # Mostrar error espec√≠fico
            php artisan migrate:status || echo "Error de conexi√≥n detectado"
          fi

          # 4. Ejecutar migraciones primero
          echo "Ejecutando migraciones..."
          php artisan migrate --force

          # 5. Cachear configuraci√≥n despu√©s de migraciones exitosas
          echo "Cacheando configuraci√≥n..."
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # 6. Crear enlaces de storage
          echo "Creando enlaces de storage..."
          php artisan storage:link

          # Permisos
          echo "Estableciendo permisos..."
          sudo chown -R webapps:www-data "$RELEASE_DIR"
          sudo chmod -R 755 "$RELEASE_DIR"
          sudo chmod -R 775 "$RELEASE_DIR/storage" "$RELEASE_DIR/bootstrap/cache"

          # Activar nueva versi√≥n
          echo "Activando nueva versi√≥n..."
          sudo rm -f "/var/www/$APP_DOMAIN"
          sudo ln -sf "$RELEASE_DIR" "/var/www/$APP_DOMAIN"

          # Recargar servicios
          echo "Recargando servicios..."
          sudo systemctl reload nginx php8.3-fpm

          # Limpiar releases antiguos (mantener √∫ltimos 3)
          echo "Limpiando releases antiguos..."
          cd "/var/deployments/releases/$APP_DOMAIN"
          ls -t | tail -n +4 | xargs -r rm -rf

          echo "=== DEPLOYMENT COMPLETADO ==="
          echo "VolleyPass actualizado exitosamente en https://$APP_DOMAIN"

          # Verificaci√≥n final robusta
          echo "Verificando aplicaci√≥n..."
          sleep 5  # Esperar a que la aplicaci√≥n se estabilice

          # Probar tanto HTTP como HTTPS
          for protocol in https http; do
            if curl -s -I "$protocol://$APP_DOMAIN" | grep -q "200 OK"; then
              echo "‚úÖ Aplicaci√≥n respondiendo en $protocol://$APP_DOMAIN"
              break
            elif curl -s -I "$protocol://$APP_DOMAIN/health" | grep -q "200 OK"; then
              echo "‚úÖ Health check OK en $protocol://$APP_DOMAIN/health"
              break
            fi
          done

          echo "üöÄ Deployment completado exitosamente"
        EOF
